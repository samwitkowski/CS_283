#include <stdio.h>
#include <stdlib.h>

#define BUFFER_SZ 50

// Prototypes
void usage(char *);
void print_buff(char *, int);
int setup_buff(char *, char *, int);
int count_words(char *, int, int);
void reverse_string(char *, int);
void print_words(char *, int, int);

int setup_buff(char *buff, char *user_str, int len) {
    char *ptr = user_str;     
    char *buff_ptr = buff;   
    int user_len = 0;        
	 
    while (*ptr == ' ' || *ptr == '\t') { //skip leading whitespace
        ptr++;
    }
    while (*ptr != '\0' && user_len < len) { //loop until eos
        if (*ptr == ' ' || *ptr == '\t') {
            if (buff_ptr == buff || *(buff_ptr - 1) != ' ') { //make sure char before space
				//is not also a space to isolate white space
                *buff_ptr++ = ' ';
                user_len++;
            }
        } else {
            *buff_ptr++ = *ptr; //copy regular chars 
		  		user_len++;
        }
        ptr++;
    }

    //check for trailing white space
	 if (user_len > 0 && *(buff_ptr - 1) == ' ') {
        buff_ptr--;
        user_len--;
    }
	 //this is required to pass test suite for inputs that go over buff
    if (*ptr != '\0') {
        return -1; 
    }

    //fill the remaining buffer
    while (buff_ptr < buff + len) {
        *buff_ptr++ = '.';
		  //user_len++;
    }

    return user_len;
}

void print_buff(char *buff, int len) {
    printf("Buffer:  ["); //Edited the print statement to better suit test suite
    for (int i = 0; i < len; i++) {
        putchar(buff[i]);
    }
    printf("]\n");  //Here as well
}

void usage(char *exename) {
    printf("usage: %s [-h|c|r|w|x] \"string\" [other args]\n", exename);
}

int count_words(char *buff, int len, int str_len) {
    int count = 0;
    int letter = 0;

    for (int i = 0; i < str_len; i++) { //loops over the string
        if (*(buff + i) != ' ') { //control statements are set up to get each word on its own
            if (!letter) {       //when letters per word ends letter resets and count increments
                count++;
                letter = 1;
            }
        } else {
            letter  = 0;
        }
    }
    return count;
}

void reverse_string(char *buff, int str_len) {
    char *start = buff;
    char *end = buff + str_len - 1; 

    while (start < end) { //until halfway though the words 
        char temp = *start;
        *start++ = *end;
        *end-- = temp; //first and last char keep switching
    }

}

void print_words(char *buff, int len, int str_len) {
    printf("Word Print\n----------\n");
    int word_count = 0;
    char *ptr = buff;
    int char_count = 0;

    for (int i = 0; i < str_len; i++) {
        if (*ptr != ' ') {
            char_count++;
        } else if (char_count > 0) {
            printf("%d. ", ++word_count);
            fwrite(ptr - char_count, 1, char_count, stdout);
            printf(" (%d)\n", char_count);
            char_count = 0;
        }
        ptr++;
    }
    // Print the last word if it exists.
    if (char_count > 0) {
        printf("%d. ", ++word_count);
        fwrite(ptr - char_count, 1, char_count, stdout);
        printf(" (%d)\n", char_count);
    }
	 printf("\n");
}

int main(int argc, char *argv[]) {
    char *buff;             // Placeholder for the internal buffer
    char *input_string;     // Holds the string provided by the user on cmd line
    char opt;               // Used to capture user option from cmd line
    int rc;                 // Used for return codes
    int user_str_len;       // Length of user-supplied string
	
	 //TODO:  #1. WHY IS THIS SAFE, aka what if arv[1] does not exist?
    //      PLACE A COMMENT BLOCK HERE EXPLAINING
	 // This is safe because the exitsence of argv[1]  is checked before
	 // The first part of the if statement runs before existenec can be checked for argv
	 // therefore the argc < 2 comparison being true causes it to exit before checking argv[1] 
    if ((argc < 2) || (*argv[1] != '-')){
        usage(argv[0]);
        exit(1);
    }

    opt = (char)*(argv[1]+1);   //get the option flag

    //handle the help flag and then exit normally
    if (opt == 'h'){
        usage(argv[0]);
        exit(0);
    }

    //WE NOW WILL HANDLE THE REQUIRED OPERATIONS

    //TODO:  #2 Document the purpose of the if statement below
    //      PLACE A COMMENT BLOCK HERE EXPLAINING
	 // This if statement checks to see if both the string and flag are provided
	 // If less than the expected arguments are provided the program exits
    if (argc < 3){
        usage(argv[0]);
        exit(1);
    }

    input_string = argv[2]; // Capture the user input string

    buff = (char *) malloc(BUFFER_SZ);
    if (buff == NULL) {
        printf("Error: Memory allocation failed.\n");
        exit(99);  // Exit with code 99 for memory allocation failure.
    }

    user_str_len = setup_buff(buff, input_string, BUFFER_SZ);
    if (user_str_len < 0) {
        printf("Error setting up buffer, error = %d\n", user_str_len);
        exit(2);
    }

    switch (opt) {
        case 'c':
            rc = count_words(buff, BUFFER_SZ, user_str_len);
            if (rc < 0) {
                printf("Error counting words, rc = %d\n", rc);
                free(buff);
                exit(2);
            }
            printf("Word Count: %d\n", rc);
            break;

        case 'r':
            reverse_string(buff, user_str_len);
            break;

        case 'w':
            print_words(buff, BUFFER_SZ, user_str_len);
            break;

        case 'x':
            if (argc != 5) {
                free(buff);
                exit(1);
            }
            printf("Not Implemented!\n");
            break;

        default:
            usage(argv[0]);
            exit(1);
    }

    print_buff(buff, BUFFER_SZ);
    free(buff);
    exit(0);
}
//TODO:  #7  Notice all of the helper functions provided in the 
//          starter take both the buffer as well as the length.  Why
//          do you think providing both the pointer and the length
//          is a good practice, after all we know from main() that 
//          the buff variable will have exactly 50 bytes?
//  
//          PLACE YOUR ANSWER HERE
//The main reason to pass the length is so that all the functions can use the length
//as a boundary if the buffer were to override the length. If the buff variabel were
// not hard coded or if different functions needed different lengths, it is possible to
// use each function for a variety of buff sizes. 
